/data/users/vasiliy/pytorch/torch/_dynamo/pgo.py:455: UserWarning: dynamo_pgo force disabled by torch._inductor.config.force_disable_caches
  warn_once(
INFO:torch._functorch._aot_autograd.jit_compile_runtime_wrappers.__aot_joint_graph:TRACED GRAPH
 ===== Joint graph 0 =====
 /data/users/vasiliy/pytorch/torch/fx/_lazy_graph_module.py class joint_helper(torch.nn.Module):
    def forward(self, primals, tangents):
        primals_1: "bf16[8192, 4096][4096, 1]cuda:0"; primals_2: "bf16[2048, 4096][4096, 1]cuda:0"; tangents_1: "bf16[2048, 8192][8192, 1]cuda:0";

        primals_1, primals_2, tangents_1, = fx_pytree.tree_flatten_spec([primals, tangents], self._in_spec)
         # File: /data/users/vasiliy/ao/torchao/float8/float8_linear.py:335 in forward, code: weight_maybe_fp8_t = self.weight.t()
        permute: "bf16[4096, 8192][1, 4096]cuda:0" = torch.ops.aten.permute.default(primals_1, [1, 0]);  primals_1 = None

         # File: /data/users/vasiliy/ao/torchao/float8/float8_linear.py:364 in forward, code: output = matmul_with_hp_or_float8_args.apply(
        abs_1: "bf16[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.abs.default(primals_2)
        max_1: "bf16[][]cuda:0" = torch.ops.aten.max.default(abs_1);  abs_1 = None
        convert_element_type: "f64[][]cuda:0" = torch.ops.prims.convert_element_type.default(max_1, torch.float64);  max_1 = None
        clamp_min: "f64[][]cuda:0" = torch.ops.aten.clamp_min.default(convert_element_type, 1e-12);  convert_element_type = None
        reciprocal: "f64[][]cuda:0" = torch.ops.aten.reciprocal.default(clamp_min);  clamp_min = None
        mul: "f64[][]cuda:0" = torch.ops.aten.mul.Tensor(reciprocal, 448.0);  reciprocal = None
        convert_element_type_1: "f32[][]cuda:0" = torch.ops.prims.convert_element_type.default(mul, torch.float32);  mul = None
        convert_element_type_2: "f32[2048, 4096][4096, 1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_2, torch.float32)
        mul_1: "f32[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_2, convert_element_type_1);  convert_element_type_2 = None
        clamp_min_1: "f32[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.clamp_min.default(mul_1, -448.0);  mul_1 = None
        clamp_max: "f32[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.clamp_max.default(clamp_min_1, 448.0);  clamp_min_1 = None
        convert_element_type_3: "f8e4m3fn[2048, 4096][4096, 1]cuda:0" = torch.ops.prims.convert_element_type.default(clamp_max, torch.float8_e4m3fn);  clamp_max = None
        abs_2: "bf16[4096, 8192][1, 4096]cuda:0" = torch.ops.aten.abs.default(permute)
        max_2: "bf16[][]cuda:0" = torch.ops.aten.max.default(abs_2);  abs_2 = None
        convert_element_type_4: "f64[][]cuda:0" = torch.ops.prims.convert_element_type.default(max_2, torch.float64);  max_2 = None
        clamp_min_2: "f64[][]cuda:0" = torch.ops.aten.clamp_min.default(convert_element_type_4, 1e-12);  convert_element_type_4 = None
        reciprocal_1: "f64[][]cuda:0" = torch.ops.aten.reciprocal.default(clamp_min_2);  clamp_min_2 = None
        mul_2: "f64[][]cuda:0" = torch.ops.aten.mul.Tensor(reciprocal_1, 448.0);  reciprocal_1 = None
        convert_element_type_5: "f32[][]cuda:0" = torch.ops.prims.convert_element_type.default(mul_2, torch.float32);  mul_2 = None
        convert_element_type_6: "f32[4096, 8192][1, 4096]cuda:0" = torch.ops.prims.convert_element_type.default(permute, torch.float32)
        mul_3: "f32[4096, 8192][1, 4096]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_6, convert_element_type_5);  convert_element_type_6 = None
        clamp_min_3: "f32[4096, 8192][1, 4096]cuda:0" = torch.ops.aten.clamp_min.default(mul_3, -448.0);  mul_3 = None
        clamp_max_1: "f32[4096, 8192][1, 4096]cuda:0" = torch.ops.aten.clamp_max.default(clamp_min_3, 448.0);  clamp_min_3 = None
        convert_element_type_7: "f8e4m3fn[4096, 8192][1, 4096]cuda:0" = torch.ops.prims.convert_element_type.default(clamp_max_1, torch.float8_e4m3fn);  clamp_max_1 = None
        view: "f8e4m3fn[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.view.default(convert_element_type_3, [-1, 4096]);  convert_element_type_3 = None
        reciprocal_2: "f32[][]cuda:0" = torch.ops.aten.reciprocal.default(convert_element_type_1);  convert_element_type_1 = None
        reciprocal_3: "f32[][]cuda:0" = torch.ops.aten.reciprocal.default(convert_element_type_5);  convert_element_type_5 = None
        _scaled_mm: "bf16[2048, 8192][8192, 1]cuda:0" = torch.ops.aten._scaled_mm.default(view, convert_element_type_7, reciprocal_2, reciprocal_3, None, None, torch.bfloat16, True);  view = convert_element_type_7 = reciprocal_2 = reciprocal_3 = None
        view_1: "bf16[2048, 8192][8192, 1]cuda:0" = torch.ops.aten.view.default(_scaled_mm, [2048, 8192]);  _scaled_mm = None
        view_2: "bf16[2048, 8192][8192, 1]cuda:0" = torch.ops.aten.view.default(tangents_1, [-1, 8192]);  tangents_1 = None
        abs_3: "bf16[2048, 8192][8192, 1]cuda:0" = torch.ops.aten.abs.default(view_2)
        max_3: "bf16[][]cuda:0" = torch.ops.aten.max.default(abs_3);  abs_3 = None
        convert_element_type_8: "f64[][]cuda:0" = torch.ops.prims.convert_element_type.default(max_3, torch.float64);  max_3 = None
        clamp_min_4: "f64[][]cuda:0" = torch.ops.aten.clamp_min.default(convert_element_type_8, 1e-12);  convert_element_type_8 = None
        reciprocal_4: "f64[][]cuda:0" = torch.ops.aten.reciprocal.default(clamp_min_4);  clamp_min_4 = None
        mul_4: "f64[][]cuda:0" = torch.ops.aten.mul.Tensor(reciprocal_4, 57344.0);  reciprocal_4 = None
        convert_element_type_9: "f32[][]cuda:0" = torch.ops.prims.convert_element_type.default(mul_4, torch.float32);  mul_4 = None
        convert_element_type_10: "f32[2048, 8192][8192, 1]cuda:0" = torch.ops.prims.convert_element_type.default(view_2, torch.float32)
        mul_5: "f32[2048, 8192][8192, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_10, convert_element_type_9);  convert_element_type_10 = None
        clamp_min_5: "f32[2048, 8192][8192, 1]cuda:0" = torch.ops.aten.clamp_min.default(mul_5, -57344.0);  mul_5 = None
        clamp_max_2: "f32[2048, 8192][8192, 1]cuda:0" = torch.ops.aten.clamp_max.default(clamp_min_5, 57344.0);  clamp_min_5 = None
        convert_element_type_11: "f8e5m2[2048, 8192][8192, 1]cuda:0" = torch.ops.prims.convert_element_type.default(clamp_max_2, torch.float8_e5m2);  clamp_max_2 = None
        abs_4: "bf16[4096, 8192][1, 4096]cuda:0" = torch.ops.aten.abs.default(permute)
        max_4: "bf16[][]cuda:0" = torch.ops.aten.max.default(abs_4);  abs_4 = None
        convert_element_type_12: "f64[][]cuda:0" = torch.ops.prims.convert_element_type.default(max_4, torch.float64);  max_4 = None
        clamp_min_6: "f64[][]cuda:0" = torch.ops.aten.clamp_min.default(convert_element_type_12, 1e-12);  convert_element_type_12 = None
        reciprocal_5: "f64[][]cuda:0" = torch.ops.aten.reciprocal.default(clamp_min_6);  clamp_min_6 = None
        mul_6: "f64[][]cuda:0" = torch.ops.aten.mul.Tensor(reciprocal_5, 448.0);  reciprocal_5 = None
        convert_element_type_13: "f32[][]cuda:0" = torch.ops.prims.convert_element_type.default(mul_6, torch.float32);  mul_6 = None
        convert_element_type_14: "f32[4096, 8192][1, 4096]cuda:0" = torch.ops.prims.convert_element_type.default(permute, torch.float32);  permute = None
        mul_7: "f32[4096, 8192][1, 4096]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_14, convert_element_type_13);  convert_element_type_14 = None
        clamp_min_7: "f32[4096, 8192][1, 4096]cuda:0" = torch.ops.aten.clamp_min.default(mul_7, -448.0);  mul_7 = None
        clamp_max_3: "f32[4096, 8192][1, 4096]cuda:0" = torch.ops.aten.clamp_max.default(clamp_min_7, 448.0);  clamp_min_7 = None
        convert_element_type_15: "f8e4m3fn[4096, 8192][1, 4096]cuda:0" = torch.ops.prims.convert_element_type.default(clamp_max_3, torch.float8_e4m3fn);  clamp_max_3 = None
        permute_1: "f8e4m3fn[8192, 4096][4096, 1]cuda:0" = torch.ops.aten.permute.default(convert_element_type_15, [1, 0]);  convert_element_type_15 = None
        permute_2: "f8e4m3fn[4096, 8192][1, 4096]cuda:0" = torch.ops.aten.permute.default(permute_1, [1, 0]);  permute_1 = None
        clone: "f8e4m3fn[4096, 8192][8192, 1]cuda:0" = torch.ops.aten.clone.default(permute_2, memory_format = torch.contiguous_format);  permute_2 = None
        permute_3: "f8e4m3fn[8192, 4096][1, 8192]cuda:0" = torch.ops.aten.permute.default(clone, [1, 0]);  clone = None
        reciprocal_6: "f32[][]cuda:0" = torch.ops.aten.reciprocal.default(convert_element_type_9);  convert_element_type_9 = None
        reciprocal_7: "f32[][]cuda:0" = torch.ops.aten.reciprocal.default(convert_element_type_13);  convert_element_type_13 = None
        _scaled_mm_1: "bf16[2048, 4096][4096, 1]cuda:0" = torch.ops.aten._scaled_mm.default(convert_element_type_11, permute_3, reciprocal_6, reciprocal_7, None, None, torch.bfloat16);  convert_element_type_11 = permute_3 = reciprocal_6 = reciprocal_7 = None
        view_3: "bf16[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.view.default(_scaled_mm_1, [2048, 4096]);  _scaled_mm_1 = None
        view_4: "bf16[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.view.default(primals_2, [-1, 4096]);  primals_2 = None
        abs_5: "bf16[2048, 8192][8192, 1]cuda:0" = torch.ops.aten.abs.default(view_2)
        max_5: "bf16[][]cuda:0" = torch.ops.aten.max.default(abs_5);  abs_5 = None
        convert_element_type_16: "f64[][]cuda:0" = torch.ops.prims.convert_element_type.default(max_5, torch.float64);  max_5 = None
        clamp_min_8: "f64[][]cuda:0" = torch.ops.aten.clamp_min.default(convert_element_type_16, 1e-12);  convert_element_type_16 = None
        reciprocal_8: "f64[][]cuda:0" = torch.ops.aten.reciprocal.default(clamp_min_8);  clamp_min_8 = None
        mul_8: "f64[][]cuda:0" = torch.ops.aten.mul.Tensor(reciprocal_8, 57344.0);  reciprocal_8 = None
        convert_element_type_17: "f32[][]cuda:0" = torch.ops.prims.convert_element_type.default(mul_8, torch.float32);  mul_8 = None
        convert_element_type_18: "f32[2048, 8192][8192, 1]cuda:0" = torch.ops.prims.convert_element_type.default(view_2, torch.float32);  view_2 = None
        mul_9: "f32[2048, 8192][8192, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_18, convert_element_type_17);  convert_element_type_18 = None
        clamp_min_9: "f32[2048, 8192][8192, 1]cuda:0" = torch.ops.aten.clamp_min.default(mul_9, -57344.0);  mul_9 = None
        clamp_max_4: "f32[2048, 8192][8192, 1]cuda:0" = torch.ops.aten.clamp_max.default(clamp_min_9, 57344.0);  clamp_min_9 = None
        convert_element_type_19: "f8e5m2[2048, 8192][8192, 1]cuda:0" = torch.ops.prims.convert_element_type.default(clamp_max_4, torch.float8_e5m2);  clamp_max_4 = None
        abs_6: "bf16[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.abs.default(view_4)
        max_6: "bf16[][]cuda:0" = torch.ops.aten.max.default(abs_6);  abs_6 = None
        convert_element_type_20: "f64[][]cuda:0" = torch.ops.prims.convert_element_type.default(max_6, torch.float64);  max_6 = None
        clamp_min_10: "f64[][]cuda:0" = torch.ops.aten.clamp_min.default(convert_element_type_20, 1e-12);  convert_element_type_20 = None
        reciprocal_9: "f64[][]cuda:0" = torch.ops.aten.reciprocal.default(clamp_min_10);  clamp_min_10 = None
        mul_10: "f64[][]cuda:0" = torch.ops.aten.mul.Tensor(reciprocal_9, 448.0);  reciprocal_9 = None
        convert_element_type_21: "f32[][]cuda:0" = torch.ops.prims.convert_element_type.default(mul_10, torch.float32);  mul_10 = None
        convert_element_type_22: "f32[2048, 4096][4096, 1]cuda:0" = torch.ops.prims.convert_element_type.default(view_4, torch.float32);  view_4 = None
        mul_11: "f32[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_22, convert_element_type_21);  convert_element_type_22 = None
        clamp_min_11: "f32[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.clamp_min.default(mul_11, -448.0);  mul_11 = None
        clamp_max_5: "f32[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.clamp_max.default(clamp_min_11, 448.0);  clamp_min_11 = None
        convert_element_type_23: "f8e4m3fn[2048, 4096][4096, 1]cuda:0" = torch.ops.prims.convert_element_type.default(clamp_max_5, torch.float8_e4m3fn);  clamp_max_5 = None
        permute_4: "f8e5m2[8192, 2048][1, 8192]cuda:0" = torch.ops.aten.permute.default(convert_element_type_19, [1, 0]);  convert_element_type_19 = None
        clone_1: "f8e5m2[8192, 2048][2048, 1]cuda:0" = torch.ops.aten.clone.default(permute_4, memory_format = torch.contiguous_format);  permute_4 = None
        permute_5: "f8e4m3fn[4096, 2048][1, 4096]cuda:0" = torch.ops.aten.permute.default(convert_element_type_23, [1, 0]);  convert_element_type_23 = None
        clone_2: "f8e4m3fn[4096, 2048][2048, 1]cuda:0" = torch.ops.aten.clone.default(permute_5, memory_format = torch.contiguous_format);  permute_5 = None
        permute_6: "f8e4m3fn[2048, 4096][1, 2048]cuda:0" = torch.ops.aten.permute.default(clone_2, [1, 0]);  clone_2 = None
        reciprocal_10: "f32[][]cuda:0" = torch.ops.aten.reciprocal.default(convert_element_type_17);  convert_element_type_17 = None
        reciprocal_11: "f32[][]cuda:0" = torch.ops.aten.reciprocal.default(convert_element_type_21);  convert_element_type_21 = None
        _scaled_mm_2: "bf16[8192, 4096][4096, 1]cuda:0" = torch.ops.aten._scaled_mm.default(clone_1, permute_6, reciprocal_10, reciprocal_11, None, None, torch.bfloat16);  clone_1 = permute_6 = reciprocal_10 = reciprocal_11 = None
        permute_7: "bf16[4096, 8192][1, 4096]cuda:0" = torch.ops.aten.permute.default(_scaled_mm_2, [1, 0]);  _scaled_mm_2 = None

         # File: /data/users/vasiliy/ao/torchao/float8/float8_linear.py:335 in forward, code: weight_maybe_fp8_t = self.weight.t()
        permute_8: "bf16[8192, 4096][4096, 1]cuda:0" = torch.ops.aten.permute.default(permute_7, [1, 0]);  permute_7 = None
        return pytree.tree_unflatten([view_1, permute_8, view_3], self._out_spec)


INFO:torch._functorch._aot_autograd.jit_compile_runtime_wrappers.__aot_graphs:aot_config id: 0, fw_metadata=ViewAndMutationMeta(input_info=[InputAliasInfo(is_leaf=True, mutates_data=False, mutates_metadata=False, mutations_hidden_from_autograd=True, mutations_under_no_grad_or_inference_mode=False, mutation_inductor_storage_resize=False, mutates_storage_metadata=False, requires_grad=True, keep_input_mutations=True), InputAliasInfo(is_leaf=True, mutates_data=False, mutates_metadata=False, mutations_hidden_from_autograd=True, mutations_under_no_grad_or_inference_mode=False, mutation_inductor_storage_resize=False, mutates_storage_metadata=False, requires_grad=True, keep_input_mutations=True)], output_info=[OutputAliasInfo(output_type=<OutputType.non_alias: 1>, raw_type=<class 'torch._subclasses.functional_tensor.FunctionalTensor'>, base_idx=None, dynamic_dims=set(), requires_grad=True, functional_tensor=None)], num_intermediate_bases=0, keep_input_mutations=True, traced_tangents=[FakeTensor(..., device='cuda:0', size=(2048, 8192), dtype=torch.bfloat16)], subclass_inp_meta=[PlainTensorMeta(unwrapped_idx=0, memory_format=None), PlainTensorMeta(unwrapped_idx=1, memory_format=None)], subclass_fw_graph_out_meta=[PlainTensorMeta(unwrapped_idx=0, memory_format=None)], subclass_tangent_meta=[PlainTensorMeta(unwrapped_idx=0, memory_format=torch.contiguous_format)], is_train=True, traced_tangent_metas=None, num_symints_saved_for_bw=0, grad_enabled_mutation=None, deterministic=False, static_input_indices=[0], tokens={}, indices_of_inputs_that_requires_grad_with_mutations_in_bw=[], bw_donated_idxs=[0, 1, 2, 3], num_backward_tokens=0), inner_meta=ViewAndMutationMeta(input_info=[InputAliasInfo(is_leaf=True, mutates_data=False, mutates_metadata=False, mutations_hidden_from_autograd=True, mutations_under_no_grad_or_inference_mode=False, mutation_inductor_storage_resize=False, mutates_storage_metadata=False, requires_grad=True, keep_input_mutations=True), InputAliasInfo(is_leaf=True, mutates_data=False, mutates_metadata=False, mutations_hidden_from_autograd=True, mutations_under_no_grad_or_inference_mode=False, mutation_inductor_storage_resize=False, mutates_storage_metadata=False, requires_grad=True, keep_input_mutations=True)], output_info=[OutputAliasInfo(output_type=<OutputType.non_alias: 1>, raw_type=<class 'torch._subclasses.functional_tensor.FunctionalTensor'>, base_idx=None, dynamic_dims=set(), requires_grad=True, functional_tensor=None)], num_intermediate_bases=0, keep_input_mutations=True, traced_tangents=[FakeTensor(..., device='cuda:0', size=(2048, 8192), dtype=torch.bfloat16)], subclass_inp_meta=[PlainTensorMeta(unwrapped_idx=0, memory_format=None), PlainTensorMeta(unwrapped_idx=1, memory_format=None)], subclass_fw_graph_out_meta=[PlainTensorMeta(unwrapped_idx=0, memory_format=None)], subclass_tangent_meta=[PlainTensorMeta(unwrapped_idx=0, memory_format=torch.contiguous_format)], is_train=True, traced_tangent_metas=None, num_symints_saved_for_bw=0, grad_enabled_mutation=None, deterministic=False, static_input_indices=[0], tokens={}, indices_of_inputs_that_requires_grad_with_mutations_in_bw=[], bw_donated_idxs=[0, 1, 2, 3], num_backward_tokens=0)
INFO:torch._functorch._aot_autograd.jit_compile_runtime_wrappers.__aot_graphs:TRACED GRAPH
 ===== Forward graph 0 =====
 /data/users/vasiliy/pytorch/torch/fx/_lazy_graph_module.py class GraphModule(torch.nn.Module):
    def forward(self, primals_1: "bf16[8192, 4096][4096, 1]cuda:0", primals_2: "bf16[2048, 4096][4096, 1]cuda:0"):
         # File: /data/users/vasiliy/ao/torchao/float8/float8_linear.py:335 in forward, code: weight_maybe_fp8_t = self.weight.t()
        permute: "bf16[4096, 8192][1, 4096]cuda:0" = torch.ops.aten.permute.default(primals_1, [1, 0]);  primals_1 = None

         # File: /data/users/vasiliy/ao/torchao/float8/float8_linear.py:364 in forward, code: output = matmul_with_hp_or_float8_args.apply(
        abs_1: "bf16[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.abs.default(primals_2)
        max_1: "bf16[][]cuda:0" = torch.ops.aten.max.default(abs_1);  abs_1 = None
        convert_element_type: "f64[][]cuda:0" = torch.ops.prims.convert_element_type.default(max_1, torch.float64);  max_1 = None
        clamp_min: "f64[][]cuda:0" = torch.ops.aten.clamp_min.default(convert_element_type, 1e-12);  convert_element_type = None
        reciprocal: "f64[][]cuda:0" = torch.ops.aten.reciprocal.default(clamp_min);  clamp_min = None
        mul: "f64[][]cuda:0" = torch.ops.aten.mul.Tensor(reciprocal, 448.0);  reciprocal = None
        convert_element_type_1: "f32[][]cuda:0" = torch.ops.prims.convert_element_type.default(mul, torch.float32);  mul = None
        convert_element_type_2: "f32[2048, 4096][4096, 1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_2, torch.float32)
        mul_1: "f32[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_2, convert_element_type_1);  convert_element_type_2 = None
        clamp_min_1: "f32[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.clamp_min.default(mul_1, -448.0);  mul_1 = None
        clamp_max: "f32[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.clamp_max.default(clamp_min_1, 448.0);  clamp_min_1 = None
        convert_element_type_3: "f8e4m3fn[2048, 4096][4096, 1]cuda:0" = torch.ops.prims.convert_element_type.default(clamp_max, torch.float8_e4m3fn);  clamp_max = None
        abs_2: "bf16[4096, 8192][1, 4096]cuda:0" = torch.ops.aten.abs.default(permute)
        max_2: "bf16[][]cuda:0" = torch.ops.aten.max.default(abs_2);  abs_2 = None
        convert_element_type_4: "f64[][]cuda:0" = torch.ops.prims.convert_element_type.default(max_2, torch.float64);  max_2 = None
        clamp_min_2: "f64[][]cuda:0" = torch.ops.aten.clamp_min.default(convert_element_type_4, 1e-12);  convert_element_type_4 = None
        reciprocal_1: "f64[][]cuda:0" = torch.ops.aten.reciprocal.default(clamp_min_2);  clamp_min_2 = None
        mul_2: "f64[][]cuda:0" = torch.ops.aten.mul.Tensor(reciprocal_1, 448.0);  reciprocal_1 = None
        convert_element_type_5: "f32[][]cuda:0" = torch.ops.prims.convert_element_type.default(mul_2, torch.float32);  mul_2 = None
        convert_element_type_6: "f32[4096, 8192][1, 4096]cuda:0" = torch.ops.prims.convert_element_type.default(permute, torch.float32);  permute = None
        mul_3: "f32[4096, 8192][1, 4096]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_6, convert_element_type_5);  convert_element_type_6 = None
        clamp_min_3: "f32[4096, 8192][1, 4096]cuda:0" = torch.ops.aten.clamp_min.default(mul_3, -448.0);  mul_3 = None
        clamp_max_1: "f32[4096, 8192][1, 4096]cuda:0" = torch.ops.aten.clamp_max.default(clamp_min_3, 448.0);  clamp_min_3 = None
        convert_element_type_7: "f8e4m3fn[4096, 8192][1, 4096]cuda:0" = torch.ops.prims.convert_element_type.default(clamp_max_1, torch.float8_e4m3fn);  clamp_max_1 = None
        view: "f8e4m3fn[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.view.default(convert_element_type_3, [-1, 4096]);  convert_element_type_3 = None
        reciprocal_2: "f32[][]cuda:0" = torch.ops.aten.reciprocal.default(convert_element_type_1);  convert_element_type_1 = None
        reciprocal_3: "f32[][]cuda:0" = torch.ops.aten.reciprocal.default(convert_element_type_5);  convert_element_type_5 = None
        _scaled_mm: "bf16[2048, 8192][8192, 1]cuda:0" = torch.ops.aten._scaled_mm.default(view, convert_element_type_7, reciprocal_2, reciprocal_3, None, None, torch.bfloat16, True);  view = reciprocal_2 = None
        clone: "f8e4m3fn[4096, 8192][8192, 1]cuda:0" = torch.ops.aten.clone.default(convert_element_type_7, memory_format = torch.contiguous_format);  convert_element_type_7 = None
        permute_3: "f8e4m3fn[8192, 4096][1, 8192]cuda:0" = torch.ops.aten.permute.default(clone, [1, 0]);  clone = None
        view_4: "bf16[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.view.default(primals_2, [-1, 4096]);  primals_2 = None
        abs_6: "bf16[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.abs.default(view_4)
        max_6: "bf16[][]cuda:0" = torch.ops.aten.max.default(abs_6);  abs_6 = None
        convert_element_type_20: "f64[][]cuda:0" = torch.ops.prims.convert_element_type.default(max_6, torch.float64);  max_6 = None
        clamp_min_10: "f64[][]cuda:0" = torch.ops.aten.clamp_min.default(convert_element_type_20, 1e-12);  convert_element_type_20 = None
        reciprocal_9: "f64[][]cuda:0" = torch.ops.aten.reciprocal.default(clamp_min_10);  clamp_min_10 = None
        mul_10: "f64[][]cuda:0" = torch.ops.aten.mul.Tensor(reciprocal_9, 448.0);  reciprocal_9 = None
        convert_element_type_21: "f32[][]cuda:0" = torch.ops.prims.convert_element_type.default(mul_10, torch.float32);  mul_10 = None
        convert_element_type_22: "f32[2048, 4096][4096, 1]cuda:0" = torch.ops.prims.convert_element_type.default(view_4, torch.float32);  view_4 = None
        mul_11: "f32[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_22, convert_element_type_21);  convert_element_type_22 = None
        clamp_min_11: "f32[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.clamp_min.default(mul_11, -448.0);  mul_11 = None
        clamp_max_5: "f32[2048, 4096][4096, 1]cuda:0" = torch.ops.aten.clamp_max.default(clamp_min_11, 448.0);  clamp_min_11 = None
        convert_element_type_23: "f8e4m3fn[2048, 4096][4096, 1]cuda:0" = torch.ops.prims.convert_element_type.default(clamp_max_5, torch.float8_e4m3fn);  clamp_max_5 = None
        permute_5: "f8e4m3fn[4096, 2048][1, 4096]cuda:0" = torch.ops.aten.permute.default(convert_element_type_23, [1, 0]);  convert_element_type_23 = None
        clone_2: "f8e4m3fn[4096, 2048][2048, 1]cuda:0" = torch.ops.aten.clone.default(permute_5, memory_format = torch.contiguous_format);  permute_5 = None
        permute_6: "f8e4m3fn[2048, 4096][1, 2048]cuda:0" = torch.ops.aten.permute.default(clone_2, [1, 0]);  clone_2 = None
        reciprocal_11: "f32[][]cuda:0" = torch.ops.aten.reciprocal.default(convert_element_type_21);  convert_element_type_21 = None
        return (_scaled_mm, reciprocal_3, permute_3, permute_6, reciprocal_11)


INFO:torch._functorch._aot_autograd.jit_compile_runtime_wrappers.__aot_graphs:TRACED GRAPH
 ===== Backward graph 0 =====
 <eval_with_key>.1 class GraphModule(torch.nn.Module):
    def forward(self, reciprocal_3: "f32[][]cuda:0", permute_3: "f8e4m3fn[8192, 4096][1, 8192]cuda:0", permute_6: "f8e4m3fn[2048, 4096][1, 2048]cuda:0", reciprocal_11: "f32[][]cuda:0", tangents_1: "bf16[2048, 8192][8192, 1]cuda:0"):
         # File: /data/users/vasiliy/ao/torchao/float8/float8_linear.py:364 in forward, code: output = matmul_with_hp_or_float8_args.apply(
        view_2: "bf16[2048, 8192][8192, 1]cuda:0" = torch.ops.aten.view.default(tangents_1, [-1, 8192]);  tangents_1 = None
        abs_3: "bf16[2048, 8192][8192, 1]cuda:0" = torch.ops.aten.abs.default(view_2)
        max_3: "bf16[][]cuda:0" = torch.ops.aten.max.default(abs_3);  abs_3 = None
        convert_element_type_8: "f64[][]cuda:0" = torch.ops.prims.convert_element_type.default(max_3, torch.float64);  max_3 = None
        clamp_min_4: "f64[][]cuda:0" = torch.ops.aten.clamp_min.default(convert_element_type_8, 1e-12);  convert_element_type_8 = None
        reciprocal_4: "f64[][]cuda:0" = torch.ops.aten.reciprocal.default(clamp_min_4);  clamp_min_4 = None
        mul_4: "f64[][]cuda:0" = torch.ops.aten.mul.Tensor(reciprocal_4, 57344.0);  reciprocal_4 = None
        convert_element_type_9: "f32[][]cuda:0" = torch.ops.prims.convert_element_type.default(mul_4, torch.float32);  mul_4 = None
        convert_element_type_10: "f32[2048, 8192][8192, 1]cuda:0" = torch.ops.prims.convert_element_type.default(view_2, torch.float32);  view_2 = None
        mul_5: "f32[2048, 8192][8192, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_10, convert_element_type_9);  convert_element_type_10 = None
        clamp_min_5: "f32[2048, 8192][8192, 1]cuda:0" = torch.ops.aten.clamp_min.default(mul_5, -57344.0);  mul_5 = None
        clamp_max_2: "f32[2048, 8192][8192, 1]cuda:0" = torch.ops.aten.clamp_max.default(clamp_min_5, 57344.0);  clamp_min_5 = None
        convert_element_type_11: "f8e5m2[2048, 8192][8192, 1]cuda:0" = torch.ops.prims.convert_element_type.default(clamp_max_2, torch.float8_e5m2);  clamp_max_2 = None
        reciprocal_6: "f32[][]cuda:0" = torch.ops.aten.reciprocal.default(convert_element_type_9);  convert_element_type_9 = None
        _scaled_mm_1: "bf16[2048, 4096][4096, 1]cuda:0" = torch.ops.aten._scaled_mm.default(convert_element_type_11, permute_3, reciprocal_6, reciprocal_3, None, None, torch.bfloat16);  permute_3 = reciprocal_3 = None
        permute_4: "f8e5m2[8192, 2048][1, 8192]cuda:0" = torch.ops.aten.permute.default(convert_element_type_11, [1, 0]);  convert_element_type_11 = None
        clone_1: "f8e5m2[8192, 2048][2048, 1]cuda:0" = torch.ops.aten.clone.default(permute_4, memory_format = torch.contiguous_format);  permute_4 = None
        _scaled_mm_2: "bf16[8192, 4096][4096, 1]cuda:0" = torch.ops.aten._scaled_mm.default(clone_1, permute_6, reciprocal_6, reciprocal_11, None, None, torch.bfloat16);  clone_1 = permute_6 = reciprocal_6 = reciprocal_11 = None
        return (_scaled_mm_2, _scaled_mm_1)


DEBUG:torch._inductor.codecache.__output_code:Output code:
# AOT ID: ['0_forward']
from ctypes import c_void_p, c_long, c_int
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align
from torch import device, empty_strided
from torch._inductor.async_compile import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels
from torch._inductor.codegen.multi_kernel import MultiKernelCall
import triton
import triton.language as tl
from torch._inductor.runtime.triton_heuristics import (
    grid,
    split_scan_grid,
    grid_combo_kernels,
    start_graph,
    end_graph,
    cooperative_reduction_grid,
)
from torch._C import _cuda_getCurrentRawStream as get_raw_stream
from torch._C import _cuda_getCurrentRawStream as get_raw_stream

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
_quantized = torch.ops._quantized
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
alloc_from_pool = torch.ops.inductor._alloc_from_pool
async_compile = AsyncCompile()
empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p


# kernel path: /tmp/torchinductor_vasiliy/tmp049hg6o0/2l/c2lfqem2e2ay3daacwn5kytihkfunb4eugbjrpof4ozb7epxx4jd.py
# Topologically Sorted Source Nodes: [output], Original ATen: [aten.abs, aten.max]
# Source node to ATen node mapping:
#   output => abs_1, max_1
# Graph fragment:
#   %abs_1 : [num_users=1] = call_function[target=torch.ops.aten.abs.default](args = (%primals_2,), kwargs = {})
#   %max_1 : [num_users=1] = call_function[target=torch.ops.aten.max.default](args = (%abs_1,), kwargs = {})
#   %abs_6 : [num_users=1] = call_function[target=torch.ops.aten.abs.default](args = (%view_4,), kwargs = {})
#   %max_6 : [num_users=1] = call_function[target=torch.ops.aten.max.default](args = (%abs_6,), kwargs = {})
triton_red_fused_abs_max_0 = async_compile.triton('triton_red_fused_abs_max_0', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 1024, 'r0_': 8192},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*bf16', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32', 'r0_numel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_abs_max_0', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': '981C98416217C4AE4C7945230F4CE94258022628884F383E21AF7AD1AB57A3C9', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': True, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'compile_id': '0/0', 'is_forward': True}
)
@triton.jit
def triton_red_fused_abs_max_0(in_ptr0, out_ptr0, out_ptr1, xnumel, r0_numel, XBLOCK : tl.constexpr, R0_BLOCK : tl.constexpr):
    xnumel = 1024
    r0_numel = 8192
    rnumel = r0_numel
    RBLOCK: tl.constexpr = R0_BLOCK
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    r0_base = tl.arange(0, R0_BLOCK)[None, :]
    rbase = r0_base
    x0 = xindex
    _tmp3 = tl.full([XBLOCK, R0_BLOCK], float("-inf"), tl.float32)
    for r0_offset in range(0, r0_numel, R0_BLOCK):
        r0_index = r0_offset + r0_base
        r0_mask = r0_index < r0_numel
        roffset = r0_offset
        rindex = r0_index
        r0_1 = r0_index
        tmp0 = tl.load(in_ptr0 + (r0_1 + 8192*x0), r0_mask & xmask, eviction_policy='evict_first', other=0.0).to(tl.float32)
        tmp1 = tl_math.abs(tmp0)
        tmp2 = tl.broadcast_to(tmp1, [XBLOCK, R0_BLOCK])
        tmp4 = triton_helpers.maximum(_tmp3, tmp2)
        _tmp3 = tl.where(r0_mask & xmask, tmp4, _tmp3)
    tmp3 = triton_helpers.max2(_tmp3, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp3, xmask)
    tl.store(out_ptr1 + (x0), tmp3, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_vasiliy/tmp049hg6o0/cb/ccb734n35nnzrpsduocnff7v2ijtdjnm2a77nrcbzuogj4sphxi3.py
# Topologically Sorted Source Nodes: [output], Original ATen: [aten.abs, aten.max, aten._to_copy, aten.clamp, aten.reciprocal, aten.mul]
# Source node to ATen node mapping:
#   output => abs_1, clamp_min, convert_element_type, convert_element_type_1, max_1, mul, reciprocal, reciprocal_2
# Graph fragment:
#   %abs_1 : [num_users=1] = call_function[target=torch.ops.aten.abs.default](args = (%primals_2,), kwargs = {})
#   %max_1 : [num_users=1] = call_function[target=torch.ops.aten.max.default](args = (%abs_1,), kwargs = {})
#   %convert_element_type : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%max_1, torch.float64), kwargs = {})
#   %clamp_min : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%convert_element_type, 1e-12), kwargs = {})
#   %reciprocal : [num_users=1] = call_function[target=torch.ops.aten.reciprocal.default](args = (%clamp_min,), kwargs = {})
#   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%reciprocal, 448.0), kwargs = {})
#   %convert_element_type_1 : [num_users=2] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%mul, torch.float32), kwargs = {})
#   %reciprocal_2 : [num_users=1] = call_function[target=torch.ops.aten.reciprocal.default](args = (%convert_element_type_1,), kwargs = {})
triton_per_fused__to_copy_abs_clamp_max_mul_reciprocal_1 = async_compile.triton('triton_per_fused__to_copy_abs_clamp_max_mul_reciprocal_1', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 1, 'r0_': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*bf16', 'out_ptr1': '*fp32', 'xnumel': 'i32', 'r0_numel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 4), 'tt.equal_to': (3,)}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused__to_copy_abs_clamp_max_mul_reciprocal_1', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': '981C98416217C4AE4C7945230F4CE94258022628884F383E21AF7AD1AB57A3C9', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': True, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'compile_id': '0/0', 'is_forward': True}
)
@triton.jit
def triton_per_fused__to_copy_abs_clamp_max_mul_reciprocal_1(in_ptr0, out_ptr0, out_ptr1, xnumel, r0_numel):
    xnumel = 1
    XBLOCK: tl.constexpr = 1
    r0_numel = 1024
    R0_BLOCK: tl.constexpr = 1024
    rnumel = r0_numel
    RBLOCK: tl.constexpr = R0_BLOCK
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([R0_BLOCK], True, tl.int1)
    r0_index = tl.arange(0, R0_BLOCK)[:]
    r0_offset = 0
    r0_mask = tl.full([R0_BLOCK], True, tl.int1)
    roffset = r0_offset
    rindex = r0_index
    r0_0 = r0_index
    tmp0 = tl.load(in_ptr0 + (r0_0), None)
    tmp1 = tl.broadcast_to(tmp0, [R0_BLOCK])
    tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
    tmp4 = tmp3.to(tl.float64)
    tmp5 = tl.full([1], 1e-12, tl.float64)
    tmp6 = triton_helpers.maximum(tmp4, tmp5)
    tmp7 = tl.full([1], 1, tl.int32)
    tmp8 = (tmp7 / tmp6)
    tmp9 = tl.full([1], 448.0, tl.float64)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp10.to(tl.float32)
    tmp12 = (tmp7 / tmp11).to(tl.float32)
    tl.store(out_ptr1 + (tl.full([1], 0, tl.int32)), tmp12, None)
    tl.store(out_ptr0 + (tl.full([1], 0, tl.int32)), tmp3, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_vasiliy/tmp049hg6o0/ir/cir6llzxac4ox2gimalfxkrlz2a2hnrd4w2ajpioy6bn3tdyipia.py
# Topologically Sorted Source Nodes: [output], Original ATen: [aten.abs, aten.max]
# Source node to ATen node mapping:
#   output => abs_2, max_2
# Graph fragment:
#   %abs_2 : [num_users=1] = call_function[target=torch.ops.aten.abs.default](args = (%permute,), kwargs = {})
#   %max_2 : [num_users=1] = call_function[target=torch.ops.aten.max.default](args = (%abs_2,), kwargs = {})
triton_per_fused_abs_max_2 = async_compile.triton('triton_per_fused_abs_max_2', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 131072, 'r0_': 256},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*bf16', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'r0_numel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_abs_max_2', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': '981C98416217C4AE4C7945230F4CE94258022628884F383E21AF7AD1AB57A3C9', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': True, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'compile_id': '0/0', 'is_forward': True}
)
@triton.jit
def triton_per_fused_abs_max_2(in_ptr0, out_ptr0, xnumel, r0_numel):
    xnumel = 131072
    XBLOCK: tl.constexpr = 1
    r0_numel = 256
    R0_BLOCK: tl.constexpr = 256
    rnumel = r0_numel
    RBLOCK: tl.constexpr = R0_BLOCK
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([R0_BLOCK], True, tl.int1)
    r0_index = tl.arange(0, R0_BLOCK)[:]
    r0_offset = 0
    r0_mask = tl.full([R0_BLOCK], True, tl.int1)
    roffset = r0_offset
    rindex = r0_index
    r0_2 = r0_index
    x0 = (xindex % 512)
    x1 = xindex // 512
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (8*x0 + 4096*(((r0_2 + 256*x1) % 8192)) + ((r0_2 + 256*x1) // 8192)), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl_math.abs(tmp0)
    tmp2 = tl.broadcast_to(tmp1, [R0_BLOCK])
    tmp4 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp2, 0))
    tl.store(out_ptr0 + (x3), tmp4, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_vasiliy/tmp049hg6o0/kb/ckbz6psixufarkbggymr4o3xhgt5pjqj7hxmbsq4btrytilcqw4m.py
# Topologically Sorted Source Nodes: [output], Original ATen: [aten.abs, aten.max]
# Source node to ATen node mapping:
#   output => abs_2, max_2
# Graph fragment:
#   %abs_2 : [num_users=1] = call_function[target=torch.ops.aten.abs.default](args = (%permute,), kwargs = {})
#   %max_2 : [num_users=1] = call_function[target=torch.ops.aten.max.default](args = (%abs_2,), kwargs = {})
triton_per_fused_abs_max_3 = async_compile.triton('triton_per_fused_abs_max_3', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 512, 'r0_': 256},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'r0_numel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_abs_max_3', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': '981C98416217C4AE4C7945230F4CE94258022628884F383E21AF7AD1AB57A3C9', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': True, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'compile_id': '0/0', 'is_forward': True}
)
@triton.jit
def triton_per_fused_abs_max_3(in_ptr0, out_ptr0, xnumel, r0_numel):
    xnumel = 512
    XBLOCK: tl.constexpr = 1
    r0_numel = 256
    R0_BLOCK: tl.constexpr = 256
    rnumel = r0_numel
    RBLOCK: tl.constexpr = R0_BLOCK
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([R0_BLOCK], True, tl.int1)
    r0_index = tl.arange(0, R0_BLOCK)[:]
    r0_offset = 0
    r0_mask = tl.full([R0_BLOCK], True, tl.int1)
    roffset = r0_offset
    rindex = r0_index
    r0_1 = r0_index
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + 512*r0_1), None)
    tmp1 = tl.broadcast_to(tmp0, [R0_BLOCK])
    tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
    tl.store(out_ptr0 + (x0), tmp3, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_vasiliy/tmp049hg6o0/g2/cg2bn7ngmimloml7s473v5querbw4anakt2kknpkccokibvbufaq.py
# Topologically Sorted Source Nodes: [output], Original ATen: [aten.abs, aten.max, aten._to_copy, aten.clamp, aten.reciprocal, aten.mul]
# Source node to ATen node mapping:
#   output => abs_2, clamp_min_2, convert_element_type_4, convert_element_type_5, max_2, mul_2, reciprocal_1, reciprocal_3
# Graph fragment:
#   %abs_2 : [num_users=1] = call_function[target=torch.ops.aten.abs.default](args = (%permute,), kwargs = {})
#   %max_2 : [num_users=1] = call_function[target=torch.ops.aten.max.default](args = (%abs_2,), kwargs = {})
#   %convert_element_type_4 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%max_2, torch.float64), kwargs = {})
#   %clamp_min_2 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%convert_element_type_4, 1e-12), kwargs = {})
#   %reciprocal_1 : [num_users=1] = call_function[target=torch.ops.aten.reciprocal.default](args = (%clamp_min_2,), kwargs = {})
#   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%reciprocal_1, 448.0), kwargs = {})
#   %convert_element_type_5 : [num_users=2] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%mul_2, torch.float32), kwargs = {})
#   %reciprocal_3 : [num_users=2] = call_function[target=torch.ops.aten.reciprocal.default](args = (%convert_element_type_5,), kwargs = {})
triton_per_fused__to_copy_abs_clamp_max_mul_reciprocal_4 = async_compile.triton('triton_per_fused__to_copy_abs_clamp_max_mul_reciprocal_4', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 1, 'r0_': 512},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*bf16', 'out_ptr1': '*fp32', 'xnumel': 'i32', 'r0_numel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 4), 'tt.equal_to': (3,)}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused__to_copy_abs_clamp_max_mul_reciprocal_4', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': '981C98416217C4AE4C7945230F4CE94258022628884F383E21AF7AD1AB57A3C9', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': True, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'compile_id': '0/0', 'is_forward': True}
)
@triton.jit
def triton_per_fused__to_copy_abs_clamp_max_mul_reciprocal_4(in_ptr0, out_ptr0, out_ptr1, xnumel, r0_numel):
    xnumel = 1
    XBLOCK: tl.constexpr = 1
    r0_numel = 512
    R0_BLOCK: tl.constexpr = 512
    rnumel = r0_numel
    RBLOCK: tl.constexpr = R0_BLOCK
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([R0_BLOCK], True, tl.int1)
    r0_index = tl.arange(0, R0_BLOCK)[:]
    r0_offset = 0
    r0_mask = tl.full([R0_BLOCK], True, tl.int1)
    roffset = r0_offset
    rindex = r0_index
    r0_0 = r0_index
    tmp0 = tl.load(in_ptr0 + (r0_0), None)
    tmp1 = tl.broadcast_to(tmp0, [R0_BLOCK])
    tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
    tmp4 = tmp3.to(tl.float64)
    tmp5 = tl.full([1], 1e-12, tl.float64)
    tmp6 = triton_helpers.maximum(tmp4, tmp5)
    tmp7 = tl.full([1], 1, tl.int32)
    tmp8 = (tmp7 / tmp6)
    tmp9 = tl.full([1], 448.0, tl.float64)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp10.to(tl.float32)
    tmp12 = (tmp7 / tmp11).to(tl.float32)
    tl.store(out_ptr1 + (tl.full([1], 0, tl.int32)), tmp12, None)
    tl.store(out_ptr0 + (tl.full([1], 0, tl.int32)), tmp3, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_vasiliy/tmp049hg6o0/7m/c7myy57nptgl6yuc6fjnf627pzc2emv23ih3h2gikeffb45agsjj.py
# Topologically Sorted Source Nodes: [output], Original ATen: [aten._to_copy, aten.clamp, aten.reciprocal, aten.mul, aten.view, aten._scaled_mm]
# Source node to ATen node mapping:
#   output => _scaled_mm, clamp_max, clamp_max_1, clamp_min, clamp_min_1, clamp_min_2, clamp_min_3, convert_element_type, convert_element_type_1, convert_element_type_2, convert_element_type_3, convert_element_type_4, convert_element_type_5, convert_element_type_6, convert_element_type_7, mul, mul_1, mul_2, mul_3, reciprocal, reciprocal_1, reciprocal_2, view
# Graph fragment:
#   %convert_element_type : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%max_1, torch.float64), kwargs = {})
#   %clamp_min : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%convert_element_type, 1e-12), kwargs = {})
#   %reciprocal : [num_users=1] = call_function[target=torch.ops.aten.reciprocal.default](args = (%clamp_min,), kwargs = {})
#   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%reciprocal, 448.0), kwargs = {})
#   %convert_element_type_1 : [num_users=2] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%mul, torch.float32), kwargs = {})
#   %convert_element_type_2 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%primals_2, torch.float32), kwargs = {})
#   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convert_element_type_2, %convert_element_type_1), kwargs = {})
#   %clamp_min_1 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%mul_1, -448.0), kwargs = {})
#   %clamp_max : [num_users=1] = call_function[target=torch.ops.aten.clamp_max.default](args = (%clamp_min_1, 448.0), kwargs = {})
#   %convert_element_type_3 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%clamp_max, torch.float8_e4m3fn), kwargs = {})
#   %convert_element_type_4 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%max_2, torch.float64), kwargs = {})
#   %clamp_min_2 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%convert_element_type_4, 1e-12), kwargs = {})
#   %reciprocal_1 : [num_users=1] = call_function[target=torch.ops.aten.reciprocal.default](args = (%clamp_min_2,), kwargs = {})
#   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%reciprocal_1, 448.0), kwargs = {})
#   %convert_element_type_5 : [num_users=2] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%mul_2, torch.float32), kwargs = {})
#   %convert_element_type_6 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%permute, torch.float32), kwargs = {})
#   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convert_element_type_6, %convert_element_type_5), kwargs = {})
#   %clamp_min_3 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%mul_3, -448.0), kwargs = {})
#   %clamp_max_1 : [num_users=1] = call_function[target=torch.ops.aten.clamp_max.default](args = (%clamp_min_3, 448.0), kwargs = {})
#   %convert_element_type_7 : [num_users=2] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%clamp_max_1, torch.float8_e4m3fn), kwargs = {})
#   %view : [num_users=1] = call_function[target=torch.ops.aten.reshape.default](args = (%convert_element_type_3, [-1, 4096]), kwargs = {})
#   %reciprocal_2 : [num_users=1] = call_function[target=torch.ops.aten.reciprocal.default](args = (%convert_element_type_1,), kwargs = {})
#   %_scaled_mm : [num_users=1] = call_function[target=torch.ops.aten._scaled_mm.default](args = (%view, %convert_element_type_7, %reciprocal_2, %reciprocal_3, None, None, torch.bfloat16, True), kwargs = {})
triton_poi_fused__scaled_mm__to_copy_clamp_mul_reciprocal_view_5 = async_compile.triton('triton_poi_fused__scaled_mm__to_copy_clamp_mul_reciprocal_view_5', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 8388608},
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*bf16', 'in_ptr1': '*bf16', 'out_ptr0': '*fp8e4nv', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__scaled_mm__to_copy_clamp_mul_reciprocal_view_5', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '981C98416217C4AE4C7945230F4CE94258022628884F383E21AF7AD1AB57A3C9', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': True, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'compile_id': '0/0', 'is_forward': True},
    min_elem_per_thread=2
)
@triton.jit
def triton_poi_fused__scaled_mm__to_copy_clamp_mul_reciprocal_view_5(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 8388608
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK])
    tmp1 = tmp0.to(tl.float32)
    tmp4 = tmp3.to(tl.float64)
    tmp5 = tl.full([1], 1e-12, tl.float64)
    tmp6 = triton_helpers.maximum(tmp4, tmp5)
    tmp7 = tl.full([1], 1, tl.int32)
    tmp8 = (tmp7 / tmp6)
    tmp9 = tl.full([1], 448.0, tl.float64)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp10.to(tl.float32)
    tmp12 = tmp1 * tmp11
    tmp13 = -448.0
    tmp14 = triton_helpers.maximum(tmp12, tmp13)
    tmp15 = 448.0
    tmp16 = triton_helpers.minimum(tmp14, tmp15)
    tmp17 = tmp16.to(tl.float8e4nv)
    tl.store(out_ptr0 + (x0), tmp17, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_vasiliy/tmp049hg6o0/ov/covcb5cxzc2ikmjaqjk6ukix5kcxsgwrxm5g4pcubgqjs6suh4yb.py
# Topologically Sorted Source Nodes: [output], Original ATen: [aten._to_copy, aten.clamp, aten.reciprocal, aten.mul, aten.view, aten._scaled_mm]
# Source node to ATen node mapping:
#   output => _scaled_mm, clamp_max, clamp_max_1, clamp_min, clamp_min_1, clamp_min_2, clamp_min_3, convert_element_type, convert_element_type_1, convert_element_type_2, convert_element_type_3, convert_element_type_4, convert_element_type_5, convert_element_type_6, convert_element_type_7, mul, mul_1, mul_2, mul_3, reciprocal, reciprocal_1, reciprocal_2, view
# Graph fragment:
#   %convert_element_type : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%max_1, torch.float64), kwargs = {})
#   %clamp_min : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%convert_element_type, 1e-12), kwargs = {})
#   %reciprocal : [num_users=1] = call_function[target=torch.ops.aten.reciprocal.default](args = (%clamp_min,), kwargs = {})
#   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%reciprocal, 448.0), kwargs = {})
#   %convert_element_type_1 : [num_users=2] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%mul, torch.float32), kwargs = {})
#   %convert_element_type_2 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%primals_2, torch.float32), kwargs = {})
#   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convert_element_type_2, %convert_element_type_1), kwargs = {})
#   %clamp_min_1 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%mul_1, -448.0), kwargs = {})
#   %clamp_max : [num_users=1] = call_function[target=torch.ops.aten.clamp_max.default](args = (%clamp_min_1, 448.0), kwargs = {})
#   %convert_element_type_3 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%clamp_max, torch.float8_e4m3fn), kwargs = {})
#   %convert_element_type_4 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%max_2, torch.float64), kwargs = {})
#   %clamp_min_2 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%convert_element_type_4, 1e-12), kwargs = {})
#   %reciprocal_1 : [num_users=1] = call_function[target=torch.ops.aten.reciprocal.default](args = (%clamp_min_2,), kwargs = {})
#   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%reciprocal_1, 448.0), kwargs = {})
#   %convert_element_type_5 : [num_users=2] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%mul_2, torch.float32), kwargs = {})
#   %convert_element_type_6 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%permute, torch.float32), kwargs = {})
#   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convert_element_type_6, %convert_element_type_5), kwargs = {})
#   %clamp_min_3 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%mul_3, -448.0), kwargs = {})
#   %clamp_max_1 : [num_users=1] = call_function[target=torch.ops.aten.clamp_max.default](args = (%clamp_min_3, 448.0), kwargs = {})
#   %convert_element_type_7 : [num_users=2] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%clamp_max_1, torch.float8_e4m3fn), kwargs = {})
#   %view : [num_users=1] = call_function[target=torch.ops.aten.reshape.default](args = (%convert_element_type_3, [-1, 4096]), kwargs = {})
#   %reciprocal_2 : [num_users=1] = call_function[target=torch.ops.aten.reciprocal.default](args = (%convert_element_type_1,), kwargs = {})
#   %_scaled_mm : [num_users=1] = call_function[target=torch.ops.aten._scaled_mm.default](args = (%view, %convert_element_type_7, %reciprocal_2, %reciprocal_3, None, None, torch.bfloat16, True), kwargs = {})
triton_poi_fused__scaled_mm__to_copy_clamp_mul_reciprocal_view_6 = async_compile.triton('triton_poi_fused__scaled_mm__to_copy_clamp_mul_reciprocal_view_6', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 33554432},
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*bf16', 'in_ptr1': '*bf16', 'out_ptr0': '*fp8e4nv', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__scaled_mm__to_copy_clamp_mul_reciprocal_view_6', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '981C98416217C4AE4C7945230F4CE94258022628884F383E21AF7AD1AB57A3C9', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': True, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'compile_id': '0/0', 'is_forward': True},
    min_elem_per_thread=2
)
@triton.jit
def triton_poi_fused__scaled_mm__to_copy_clamp_mul_reciprocal_view_6(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 33554432
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK])
    tmp1 = tmp0.to(tl.float32)
    tmp4 = tmp3.to(tl.float64)
    tmp5 = tl.full([1], 1e-12, tl.float64)
    tmp6 = triton_helpers.maximum(tmp4, tmp5)
    tmp7 = tl.full([1], 1, tl.int32)
    tmp8 = (tmp7 / tmp6)
    tmp9 = tl.full([1], 448.0, tl.float64)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp10.to(tl.float32)
    tmp12 = tmp1 * tmp11
    tmp13 = -448.0
    tmp14 = triton_helpers.maximum(tmp12, tmp13)
    tmp15 = 448.0
    tmp16 = triton_helpers.minimum(tmp14, tmp15)
    tmp17 = tmp16.to(tl.float8e4nv)
    tl.store(out_ptr0 + (x0), tmp17, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_vasiliy/tmp049hg6o0/io/ciosmpnon65ciqqxmrr7tfodr4elezksyn7ihbd6utoqrlyiam46.py
# Topologically Sorted Source Nodes: [output], Original ATen: [aten._to_copy, aten.clamp, aten.reciprocal, aten.mul, aten.clone]
# Source node to ATen node mapping:
#   output => clamp_max_1, clamp_min_2, clamp_min_3, convert_element_type_4, convert_element_type_5, convert_element_type_6, convert_element_type_7, mul_2, mul_3, reciprocal_1
# Graph fragment:
#   %convert_element_type_4 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%max_2, torch.float64), kwargs = {})
#   %clamp_min_2 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%convert_element_type_4, 1e-12), kwargs = {})
#   %reciprocal_1 : [num_users=1] = call_function[target=torch.ops.aten.reciprocal.default](args = (%clamp_min_2,), kwargs = {})
#   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%reciprocal_1, 448.0), kwargs = {})
#   %convert_element_type_5 : [num_users=2] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%mul_2, torch.float32), kwargs = {})
#   %convert_element_type_6 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%permute, torch.float32), kwargs = {})
#   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convert_element_type_6, %convert_element_type_5), kwargs = {})
#   %clamp_min_3 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%mul_3, -448.0), kwargs = {})
#   %clamp_max_1 : [num_users=1] = call_function[target=torch.ops.aten.clamp_max.default](args = (%clamp_min_3, 448.0), kwargs = {})
#   %convert_element_type_7 : [num_users=2] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%clamp_max_1, torch.float8_e4m3fn), kwargs = {})
#   %clone : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%convert_element_type_7,), kwargs = {memory_format: torch.contiguous_format})
triton_poi_fused__to_copy_clamp_clone_mul_reciprocal_7 = async_compile.triton('triton_poi_fused__to_copy_clamp_clone_mul_reciprocal_7', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'y': 4096, 'x': 8192}, tile_hint=TileHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*bf16', 'in_ptr1': '*bf16', 'out_ptr0': '*fp8e4nv', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__to_copy_clamp_clone_mul_reciprocal_7', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '981C98416217C4AE4C7945230F4CE94258022628884F383E21AF7AD1AB57A3C9', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': True, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'compile_id': '0/0', 'is_forward': True},
    min_elem_per_thread=2
)
@triton.jit
def triton_poi_fused__to_copy_clamp_clone_mul_reciprocal_7(in_ptr0, in_ptr1, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 4096
    xnumel = 8192
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
    x1 = xindex
    y0 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + 4096*x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK, YBLOCK])
    tmp1 = tmp0.to(tl.float32)
    tmp4 = tmp3.to(tl.float64)
    tmp5 = tl.full([1, 1], 1e-12, tl.float64)
    tmp6 = triton_helpers.maximum(tmp4, tmp5)
    tmp7 = tl.full([1, 1], 1, tl.int32)
    tmp8 = (tmp7 / tmp6)
    tmp9 = tl.full([1, 1], 448.0, tl.float64)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp10.to(tl.float32)
    tmp12 = tmp1 * tmp11
    tmp13 = -448.0
    tmp14 = triton_helpers.maximum(tmp12, tmp13)
    tmp15 = 448.0
    tmp16 = triton_helpers.minimum(tmp14, tmp15)
    tmp17 = tmp16.to(tl.float8e4nv)
    tl.store(out_ptr0 + (x1 + 8192*y0), tmp17, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_vasiliy/tmp049hg6o0/ok/cokmjt32c4htndzxovifq6v5eogvwi34nujm632iwrlmorchcogh.py
# Topologically Sorted Source Nodes: [], Original ATen: [aten.clone]
# Source node to ATen node mapping:
# Graph fragment:
#   %clone_2 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%permute_5,), kwargs = {memory_format: torch.contiguous_format})
triton_poi_fused_clone_8 = async_compile.triton('triton_poi_fused_clone_8', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'y': 4096, 'x': 2048}, tile_hint=TileHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*bf16', 'in_ptr1': '*bf16', 'out_ptr0': '*fp8e4nv', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_8', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '981C98416217C4AE4C7945230F4CE94258022628884F383E21AF7AD1AB57A3C9', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': True, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'compile_id': '0/0', 'is_forward': True},
    min_elem_per_thread=2
)
@triton.jit
def triton_poi_fused_clone_8(in_ptr0, in_ptr1, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 4096
    xnumel = 2048
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x1 = xindex
    y0 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + 4096*x1), xmask, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK, YBLOCK])
    tmp1 = tmp0.to(tl.float32)
    tmp4 = tmp3.to(tl.float64)
    tmp5 = tl.full([1, 1], 1e-12, tl.float64)
    tmp6 = triton_helpers.maximum(tmp4, tmp5)
    tmp7 = tl.full([1, 1], 1, tl.int32)
    tmp8 = (tmp7 / tmp6)
    tmp9 = tl.full([1, 1], 448.0, tl.float64)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp10.to(tl.float32)
    tmp12 = tmp1 * tmp11
    tmp13 = -448.0
    tmp14 = triton_helpers.maximum(tmp12, tmp13)
    tmp15 = 448.0
    tmp16 = triton_helpers.minimum(tmp14, tmp15)
    tmp17 = tmp16.to(tl.float8e4nv)
    tl.store(out_ptr0 + (x1 + 2048*y0), tmp17, xmask)
''', device_str='cuda')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_1, primals_2 = args
    args.clear()
    assert_size_stride(primals_1, (8192, 4096), (4096, 1))
    assert_size_stride(primals_2, (2048, 4096), (4096, 1))
    with torch.cuda._DeviceGuard(0):
        torch.cuda.set_device(0)
        buf0 = empty_strided_cuda((1024, ), (1, ), torch.float32)
        buf11 = empty_strided_cuda((1024, ), (1, ), torch.float32)
        # Topologically Sorted Source Nodes: [output], Original ATen: [aten.abs, aten.max]
        stream0 = get_raw_stream(0)
        triton_red_fused_abs_max_0.run(primals_2, buf0, buf11, 1024, 8192, grid=grid(1024), stream=stream0)
        buf1 = empty_strided_cuda((), (), torch.bfloat16)
        buf8 = empty_strided_cuda((), (), torch.float32)
        # Topologically Sorted Source Nodes: [output], Original ATen: [aten.abs, aten.max, aten._to_copy, aten.clamp, aten.reciprocal, aten.mul]
        stream0 = get_raw_stream(0)
        triton_per_fused__to_copy_abs_clamp_max_mul_reciprocal_1.run(buf0, buf1, buf8, 1, 1024, grid=grid(1), stream=stream0)
        del buf0
        buf2 = empty_strided_cuda((512, 256), (1, 512), torch.float32)
        # Topologically Sorted Source Nodes: [output], Original ATen: [aten.abs, aten.max]
        stream0 = get_raw_stream(0)
        triton_per_fused_abs_max_2.run(primals_1, buf2, 131072, 256, grid=grid(131072), stream=stream0)
        buf3 = empty_strided_cuda((512, ), (1, ), torch.float32)
        # Topologically Sorted Source Nodes: [output], Original ATen: [aten.abs, aten.max]
        stream0 = get_raw_stream(0)
        triton_per_fused_abs_max_3.run(buf2, buf3, 512, 256, grid=grid(512), stream=stream0)
        del buf2
        buf4 = empty_strided_cuda((), (), torch.bfloat16)
        buf5 = empty_strided_cuda((), (), torch.float32)
        # Topologically Sorted Source Nodes: [output], Original ATen: [aten.abs, aten.max, aten._to_copy, aten.clamp, aten.reciprocal, aten.mul]
        stream0 = get_raw_stream(0)
        triton_per_fused__to_copy_abs_clamp_max_mul_reciprocal_4.run(buf3, buf4, buf5, 1, 512, grid=grid(1), stream=stream0)
        del buf3
        buf6 = empty_strided_cuda((2048, 4096), (4096, 1), torch.float8_e4m3fn)
        # Topologically Sorted Source Nodes: [output], Original ATen: [aten._to_copy, aten.clamp, aten.reciprocal, aten.mul, aten.view, aten._scaled_mm]
        stream0 = get_raw_stream(0)
        triton_poi_fused__scaled_mm__to_copy_clamp_mul_reciprocal_view_5.run(primals_2, buf1, buf6, 8388608, grid=grid(8388608), stream=stream0)
        del buf1
        buf7 = empty_strided_cuda((4096, 8192), (1, 4096), torch.float8_e4m3fn)
        # Topologically Sorted Source Nodes: [output], Original ATen: [aten._to_copy, aten.clamp, aten.reciprocal, aten.mul, aten.view, aten._scaled_mm]
        stream0 = get_raw_stream(0)
        triton_poi_fused__scaled_mm__to_copy_clamp_mul_reciprocal_view_6.run(primals_1, buf4, buf7, 33554432, grid=grid(33554432), stream=stream0)
        buf9 = empty_strided_cuda((2048, 8192), (8192, 1), torch.bfloat16)
        # Topologically Sorted Source Nodes: [output], Original ATen: [aten._to_copy, aten.clamp, aten.reciprocal, aten.mul, aten.view, aten._scaled_mm]
        extern_kernels._scaled_mm(buf6, buf7, buf8, buf5, out_dtype=torch.bfloat16, use_fast_accum=True, out=buf9)
        buf10 = reinterpret_tensor(buf7, (4096, 8192), (8192, 1), 0); del buf7  # reuse
        # Topologically Sorted Source Nodes: [output], Original ATen: [aten._to_copy, aten.clamp, aten.reciprocal, aten.mul, aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused__to_copy_clamp_clone_mul_reciprocal_7.run(primals_1, buf4, buf10, 4096, 8192, grid=grid(4096, 8192), stream=stream0)
        del primals_1
        buf12 = buf4; del buf4  # reuse
        buf14 = buf8; del buf8  # reuse
        # Topologically Sorted Source Nodes: [], Original ATen: [aten.abs, aten.max, aten._to_copy, aten.clamp, aten.reciprocal, aten.mul]
        stream0 = get_raw_stream(0)
        triton_per_fused__to_copy_abs_clamp_max_mul_reciprocal_1.run(buf11, buf12, buf14, 1, 1024, grid=grid(1), stream=stream0)
        del buf11
        buf13 = reinterpret_tensor(buf6, (4096, 2048), (2048, 1), 0); del buf6  # reuse
        # Topologically Sorted Source Nodes: [], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_8.run(primals_2, buf12, buf13, 4096, 2048, grid=grid(4096, 2048), stream=stream0)
        del buf12
        del primals_2
    return (buf9, buf5, reinterpret_tensor(buf10, (8192, 4096), (1, 8192), 0), reinterpret_tensor(buf13, (2048, 4096), (1, 2048), 0), buf14, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_1 = rand_strided((8192, 4096), (4096, 1), device='cuda:0', dtype=torch.bfloat16)
    primals_2 = rand_strided((2048, 4096), (4096, 1), device='cuda:0', dtype=torch.bfloat16)
    fn = lambda: call([primals_1, primals_2])
    return print_performance(fn, times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('None', benchmark_compiled_module)

DEBUG:torch._inductor.codecache.__output_code:Output code written to: /tmp/torchinductor_vasiliy/tmp049hg6o0/g3/cg34lyora6roq24xzf57oiajpsfm62k7zh2mi2lig3zdtcjjdcjr.py
INFO:torch._inductor.codecache.__output_code:Output code written to: /tmp/torchinductor_vasiliy/tmp049hg6o0/g3/cg34lyora6roq24xzf57oiajpsfm62k7zh2mi2lig3zdtcjjdcjr.py
DEBUG:torch._inductor.codecache.__output_code:Output code:
# AOT ID: ['0_backward']
from ctypes import c_void_p, c_long, c_int
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align
from torch import device, empty_strided
from torch._inductor.async_compile import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels
from torch._inductor.codegen.multi_kernel import MultiKernelCall
import triton
import triton.language as tl
from torch._inductor.runtime.triton_heuristics import (
    grid,
    split_scan_grid,
    grid_combo_kernels,
    start_graph,
    end_graph,
    cooperative_reduction_grid,
)
from torch._C import _cuda_getCurrentRawStream as get_raw_stream
from torch._C import _cuda_getCurrentRawStream as get_raw_stream

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
_quantized = torch.ops._quantized
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
alloc_from_pool = torch.ops.inductor._alloc_from_pool
async_compile = AsyncCompile()
empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p


# kernel path: /tmp/torchinductor_vasiliy/tmpehhnteb6/45/c45l3kivhblowi6mtfw7wloml2paxqr7zjf64oh5ky2jzu7flkui.py
# Topologically Sorted Source Nodes: [], Original ATen: [aten.abs, aten.max]
# Source node to ATen node mapping:
# Graph fragment:
#   %abs_3 : [num_users=1] = call_function[target=torch.ops.aten.abs.default](args = (%view_2,), kwargs = {})
#   %max_3 : [num_users=1] = call_function[target=torch.ops.aten.max.default](args = (%abs_3,), kwargs = {})
triton_red_fused_abs_max_0 = async_compile.triton('triton_red_fused_abs_max_0', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 512, 'r0_': 32768},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*bf16', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'r0_numel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_abs_max_0', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': '981C98416217C4AE4C7945230F4CE94258022628884F383E21AF7AD1AB57A3C9', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': True, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'compile_id': '0/0', 'is_forward': False}
)
@triton.jit
def triton_red_fused_abs_max_0(in_ptr0, out_ptr0, xnumel, r0_numel, XBLOCK : tl.constexpr, R0_BLOCK : tl.constexpr):
    xnumel = 512
    r0_numel = 32768
    rnumel = r0_numel
    RBLOCK: tl.constexpr = R0_BLOCK
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    r0_base = tl.arange(0, R0_BLOCK)[None, :]
    rbase = r0_base
    x0 = xindex
    _tmp3 = tl.full([XBLOCK, R0_BLOCK], float("-inf"), tl.float32)
    for r0_offset in range(0, r0_numel, R0_BLOCK):
        r0_index = r0_offset + r0_base
        r0_mask = r0_index < r0_numel
        roffset = r0_offset
        rindex = r0_index
        r0_1 = r0_index
        tmp0 = tl.load(in_ptr0 + (r0_1 + 32768*x0), r0_mask & xmask, eviction_policy='evict_first', other=0.0).to(tl.float32)
        tmp1 = tl_math.abs(tmp0)
        tmp2 = tl.broadcast_to(tmp1, [XBLOCK, R0_BLOCK])
        tmp4 = triton_helpers.maximum(_tmp3, tmp2)
        _tmp3 = tl.where(r0_mask & xmask, tmp4, _tmp3)
    tmp3 = triton_helpers.max2(_tmp3, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp3, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_vasiliy/tmpehhnteb6/wj/cwjh55wcl3r73aktrqw7ts4e6kp3jhv4ir7ajgakk4uqp4i2phuy.py
# Topologically Sorted Source Nodes: [], Original ATen: [aten.abs, aten.max, aten._to_copy, aten.clamp, aten.reciprocal, aten.mul]
# Source node to ATen node mapping:
# Graph fragment:
#   %abs_3 : [num_users=1] = call_function[target=torch.ops.aten.abs.default](args = (%view_2,), kwargs = {})
#   %max_3 : [num_users=1] = call_function[target=torch.ops.aten.max.default](args = (%abs_3,), kwargs = {})
#   %convert_element_type_8 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%max_3, torch.float64), kwargs = {})
#   %clamp_min_4 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%convert_element_type_8, 1e-12), kwargs = {})
#   %reciprocal_4 : [num_users=1] = call_function[target=torch.ops.aten.reciprocal.default](args = (%clamp_min_4,), kwargs = {})
#   %mul_4 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%reciprocal_4, 57344.0), kwargs = {})
#   %convert_element_type_9 : [num_users=2] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%mul_4, torch.float32), kwargs = {})
#   %reciprocal_6 : [num_users=2] = call_function[target=torch.ops.aten.reciprocal.default](args = (%convert_element_type_9,), kwargs = {})
triton_per_fused__to_copy_abs_clamp_max_mul_reciprocal_1 = async_compile.triton('triton_per_fused__to_copy_abs_clamp_max_mul_reciprocal_1', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 1, 'r0_': 512},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*bf16', 'out_ptr1': '*fp32', 'xnumel': 'i32', 'r0_numel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 4), 'tt.equal_to': (3,)}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused__to_copy_abs_clamp_max_mul_reciprocal_1', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': '981C98416217C4AE4C7945230F4CE94258022628884F383E21AF7AD1AB57A3C9', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': True, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'compile_id': '0/0', 'is_forward': False}
)
@triton.jit
def triton_per_fused__to_copy_abs_clamp_max_mul_reciprocal_1(in_ptr0, out_ptr0, out_ptr1, xnumel, r0_numel):
    xnumel = 1
    XBLOCK: tl.constexpr = 1
    r0_numel = 512
    R0_BLOCK: tl.constexpr = 512
    rnumel = r0_numel
    RBLOCK: tl.constexpr = R0_BLOCK
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([R0_BLOCK], True, tl.int1)
    r0_index = tl.arange(0, R0_BLOCK)[:]
    r0_offset = 0
    r0_mask = tl.full([R0_BLOCK], True, tl.int1)
    roffset = r0_offset
    rindex = r0_index
    r0_0 = r0_index
    tmp0 = tl.load(in_ptr0 + (r0_0), None)
    tmp1 = tl.broadcast_to(tmp0, [R0_BLOCK])
    tmp3 = triton_helpers.promote_to_tensor(triton_helpers.max2(tmp1, 0))
    tmp4 = tmp3.to(tl.float64)
    tmp5 = tl.full([1], 1e-12, tl.float64)
    tmp6 = triton_helpers.maximum(tmp4, tmp5)
    tmp7 = tl.full([1], 1, tl.int32)
    tmp8 = (tmp7 / tmp6)
    tmp9 = tl.full([1], 57344.0, tl.float64)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp10.to(tl.float32)
    tmp12 = (tmp7 / tmp11).to(tl.float32)
    tl.store(out_ptr1 + (tl.full([1], 0, tl.int32)), tmp12, None)
    tl.store(out_ptr0 + (tl.full([1], 0, tl.int32)), tmp3, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_vasiliy/tmpehhnteb6/sh/csh5ee2kltfhepqughltc542pvalkj4podowtv6cxnwnp52aalbn.py
# Topologically Sorted Source Nodes: [], Original ATen: [aten._to_copy, aten.clamp, aten.reciprocal, aten.mul, aten._scaled_mm]
# Source node to ATen node mapping:
# Graph fragment:
#   %convert_element_type_8 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%max_3, torch.float64), kwargs = {})
#   %clamp_min_4 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%convert_element_type_8, 1e-12), kwargs = {})
#   %reciprocal_4 : [num_users=1] = call_function[target=torch.ops.aten.reciprocal.default](args = (%clamp_min_4,), kwargs = {})
#   %mul_4 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%reciprocal_4, 57344.0), kwargs = {})
#   %convert_element_type_9 : [num_users=2] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%mul_4, torch.float32), kwargs = {})
#   %convert_element_type_10 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%view_2, torch.float32), kwargs = {})
#   %mul_5 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convert_element_type_10, %convert_element_type_9), kwargs = {})
#   %clamp_min_5 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%mul_5, -57344.0), kwargs = {})
#   %clamp_max_2 : [num_users=1] = call_function[target=torch.ops.aten.clamp_max.default](args = (%clamp_min_5, 57344.0), kwargs = {})
#   %convert_element_type_11 : [num_users=2] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%clamp_max_2, torch.float8_e5m2), kwargs = {})
#   %reciprocal_6 : [num_users=2] = call_function[target=torch.ops.aten.reciprocal.default](args = (%convert_element_type_9,), kwargs = {})
#   %_scaled_mm_1 : [num_users=1] = call_function[target=torch.ops.aten._scaled_mm.default](args = (%convert_element_type_11, %permute_3, %reciprocal_6, %reciprocal_3, None, None, torch.bfloat16), kwargs = {})
triton_poi_fused__scaled_mm__to_copy_clamp_mul_reciprocal_2 = async_compile.triton('triton_poi_fused__scaled_mm__to_copy_clamp_mul_reciprocal_2', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 16777216},
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*bf16', 'in_ptr1': '*bf16', 'out_ptr0': '*fp8e5', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__scaled_mm__to_copy_clamp_mul_reciprocal_2', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '981C98416217C4AE4C7945230F4CE94258022628884F383E21AF7AD1AB57A3C9', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': True, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'compile_id': '0/0', 'is_forward': False},
    min_elem_per_thread=4
)
@triton.jit
def triton_poi_fused__scaled_mm__to_copy_clamp_mul_reciprocal_2(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 16777216
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK])
    tmp1 = tmp0.to(tl.float32)
    tmp4 = tmp3.to(tl.float64)
    tmp5 = tl.full([1], 1e-12, tl.float64)
    tmp6 = triton_helpers.maximum(tmp4, tmp5)
    tmp7 = tl.full([1], 1, tl.int32)
    tmp8 = (tmp7 / tmp6)
    tmp9 = tl.full([1], 57344.0, tl.float64)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp10.to(tl.float32)
    tmp12 = tmp1 * tmp11
    tmp13 = -57344.0
    tmp14 = triton_helpers.maximum(tmp12, tmp13)
    tmp15 = 57344.0
    tmp16 = triton_helpers.minimum(tmp14, tmp15)
    tmp17 = tmp16.to(tl.float8e5)
    tl.store(out_ptr0 + (x0), tmp17, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_vasiliy/tmpehhnteb6/4l/c4l4qac73ircic3kz7s5m25r53asb2qqjv2ddkimfjuhzdffizkk.py
# Topologically Sorted Source Nodes: [], Original ATen: [aten.clone, aten._scaled_mm]
# Source node to ATen node mapping:
# Graph fragment:
#   %clone_1 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%permute_4,), kwargs = {memory_format: torch.contiguous_format})
#   %_scaled_mm_2 : [num_users=1] = call_function[target=torch.ops.aten._scaled_mm.default](args = (%clone_1, %permute_6, %reciprocal_6, %reciprocal_11, None, None, torch.bfloat16), kwargs = {})
triton_poi_fused__scaled_mm_clone_3 = async_compile.triton('triton_poi_fused__scaled_mm_clone_3', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'y': 8192, 'x': 2048}, tile_hint=TileHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*bf16', 'in_ptr1': '*bf16', 'out_ptr0': '*fp8e5', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__scaled_mm_clone_3', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '981C98416217C4AE4C7945230F4CE94258022628884F383E21AF7AD1AB57A3C9', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': True, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'compile_id': '0/0', 'is_forward': False},
    min_elem_per_thread=4
)
@triton.jit
def triton_poi_fused__scaled_mm_clone_3(in_ptr0, in_ptr1, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 8192
    xnumel = 2048
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x1 = xindex
    y0 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + 8192*x1), xmask, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK, YBLOCK])
    tmp1 = tmp0.to(tl.float32)
    tmp4 = tmp3.to(tl.float64)
    tmp5 = tl.full([1, 1], 1e-12, tl.float64)
    tmp6 = triton_helpers.maximum(tmp4, tmp5)
    tmp7 = tl.full([1, 1], 1, tl.int32)
    tmp8 = (tmp7 / tmp6)
    tmp9 = tl.full([1, 1], 57344.0, tl.float64)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp10.to(tl.float32)
    tmp12 = tmp1 * tmp11
    tmp13 = -57344.0
    tmp14 = triton_helpers.maximum(tmp12, tmp13)
    tmp15 = 57344.0
    tmp16 = triton_helpers.minimum(tmp14, tmp15)
    tmp17 = tmp16.to(tl.float8e5)
    tl.store(out_ptr0 + (x1 + 2048*y0), tmp17, xmask)
''', device_str='cuda')


async_compile.wait(globals())
del async_compile

def call(args):
    reciprocal_3, permute_3, permute_6, reciprocal_11, tangents_1 = args
    args.clear()
    assert_size_stride(reciprocal_3, (), ())
    assert_size_stride(permute_3, (8192, 4096), (1, 8192))
    assert_size_stride(permute_6, (2048, 4096), (1, 2048))
    assert_size_stride(reciprocal_11, (), ())
    assert_size_stride(tangents_1, (2048, 8192), (8192, 1))
    with torch.cuda._DeviceGuard(0):
        torch.cuda.set_device(0)
        buf0 = empty_strided_cuda((512, ), (1, ), torch.float32)
        # Topologically Sorted Source Nodes: [], Original ATen: [aten.abs, aten.max]
        stream0 = get_raw_stream(0)
        triton_red_fused_abs_max_0.run(tangents_1, buf0, 512, 32768, grid=grid(512), stream=stream0)
        buf1 = empty_strided_cuda((), (), torch.bfloat16)
        buf3 = empty_strided_cuda((), (), torch.float32)
        # Topologically Sorted Source Nodes: [], Original ATen: [aten.abs, aten.max, aten._to_copy, aten.clamp, aten.reciprocal, aten.mul]
        stream0 = get_raw_stream(0)
        triton_per_fused__to_copy_abs_clamp_max_mul_reciprocal_1.run(buf0, buf1, buf3, 1, 512, grid=grid(1), stream=stream0)
        del buf0
        buf2 = empty_strided_cuda((2048, 8192), (8192, 1), torch.float8_e5m2)
        # Topologically Sorted Source Nodes: [], Original ATen: [aten._to_copy, aten.clamp, aten.reciprocal, aten.mul, aten._scaled_mm]
        stream0 = get_raw_stream(0)
        triton_poi_fused__scaled_mm__to_copy_clamp_mul_reciprocal_2.run(tangents_1, buf1, buf2, 16777216, grid=grid(16777216), stream=stream0)
        buf4 = empty_strided_cuda((2048, 4096), (4096, 1), torch.bfloat16)
        # Topologically Sorted Source Nodes: [], Original ATen: [aten._to_copy, aten.clamp, aten.reciprocal, aten.mul, aten._scaled_mm]
        extern_kernels._scaled_mm(buf2, permute_3, buf3, reciprocal_3, out_dtype=torch.bfloat16, use_fast_accum=False, out=buf4)
        del permute_3
        del reciprocal_3
        buf5 = reinterpret_tensor(buf2, (8192, 2048), (2048, 1), 0); del buf2  # reuse
        # Topologically Sorted Source Nodes: [], Original ATen: [aten.clone, aten._scaled_mm]
        stream0 = get_raw_stream(0)
        triton_poi_fused__scaled_mm_clone_3.run(tangents_1, buf1, buf5, 8192, 2048, grid=grid(8192, 2048), stream=stream0)
        del buf1
        del tangents_1
        buf6 = empty_strided_cuda((8192, 4096), (4096, 1), torch.bfloat16)
        # Topologically Sorted Source Nodes: [], Original ATen: [aten.clone, aten._scaled_mm]
        extern_kernels._scaled_mm(buf5, permute_6, buf3, reciprocal_11, out_dtype=torch.bfloat16, use_fast_accum=False, out=buf6)
        del buf3
        del buf5
        del permute_6
        del reciprocal_11
    return (buf6, buf4, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    reciprocal_3 = rand_strided((), (), device='cuda:0', dtype=torch.float32)
    permute_3 = rand_strided((8192, 4096), (1, 8192), device='cuda:0', dtype=torch.float8_e4m3fn)
    permute_6 = rand_strided((2048, 4096), (1, 2048), device='cuda:0', dtype=torch.float8_e4m3fn)
    reciprocal_11 = rand_strided((), (), device='cuda:0', dtype=torch.float32)
    tangents_1 = rand_strided((2048, 8192), (8192, 1), device='cuda:0', dtype=torch.bfloat16)
    fn = lambda: call([reciprocal_3, permute_3, permute_6, reciprocal_11, tangents_1])
    return print_performance(fn, times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('None', benchmark_compiled_module)

DEBUG:torch._inductor.codecache.__output_code:Output code written to: /tmp/torchinductor_vasiliy/tmpehhnteb6/lb/clbgcit4kbrvqptey5crnwmmisy5t2inqfeqsgoueyo6uy2bwx52.py
INFO:torch._inductor.codecache.__output_code:Output code written to: /tmp/torchinductor_vasiliy/tmpehhnteb6/lb/clbgcit4kbrvqptey5crnwmmisy5t2inqfeqsgoueyo6uy2bwx52.py
Compile is set to       | True
model_type is set to    | linear
scaling_repr is set to  | dyn_dyn_dyn
enable_activation_checkpointing is set to False
profiling float8
saved profiling trace to /home/vasiliy/local/tmp/20241230_test_linear_float8_compile_True_dyn_dyn_dyn.json
Sync time ms: 0.0

Summary of GPU time by CPU kernel

    experiment  ... bw_gpbs
7    1_float8  ...    None
2    1_float8  ...    None
8    1_float8  ...    None
6    1_float8  ...    None
11   1_float8  ...    None
0    1_float8  ...    None
10   1_float8  ...    None
5    1_float8  ...    None
1    1_float8  ...    None
3    1_float8  ...    None
4    1_float8  ...    None
9    1_float8  ...    None

[12 rows x 6 columns]

Summary of time (ms) by kernel category

 experiment     1_float8
category
0_gemm            0.361
1_f8_overhead     0.463
2_other           0.015
All               0.838
